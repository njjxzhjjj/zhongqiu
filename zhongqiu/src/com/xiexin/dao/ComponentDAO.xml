<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiexin.dao.ComponentDAO">
  <resultMap id="BaseResultMap" type="com.xiexin.bean.Component">
    <id column="component_id" jdbcType="INTEGER" property="componentId" />
    <result column="Type_id" jdbcType="INTEGER" property="typeId" />
    <result column="Component_name" jdbcType="VARCHAR" property="componentName" />
    <result column="capacity" jdbcType="VARCHAR" property="capacity" />
    <result column="price" jdbcType="INTEGER" property="price" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    component_id, Type_id, Component_name, capacity, price
  </sql>
  <select id="selectByExample" parameterType="com.xiexin.bean.ComponentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from component
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from component
    where component_id = #{componentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from component
    where component_id = #{componentId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xiexin.bean.ComponentExample">
    delete from component
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xiexin.bean.Component">
    insert into component (component_id, Type_id, Component_name, 
      capacity, price)
    values (#{componentId,jdbcType=INTEGER}, #{typeId,jdbcType=INTEGER}, #{componentName,jdbcType=VARCHAR}, 
      #{capacity,jdbcType=VARCHAR}, #{price,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.xiexin.bean.Component">
    insert into component
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="componentId != null">
        component_id,
      </if>
      <if test="typeId != null">
        Type_id,
      </if>
      <if test="componentName != null">
        Component_name,
      </if>
      <if test="capacity != null">
        capacity,
      </if>
      <if test="price != null">
        price,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="componentId != null">
        #{componentId,jdbcType=INTEGER},
      </if>
      <if test="typeId != null">
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="componentName != null">
        #{componentName,jdbcType=VARCHAR},
      </if>
      <if test="capacity != null">
        #{capacity,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xiexin.bean.ComponentExample" resultType="java.lang.Long">
    select count(*) from component
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update component
    <set>
      <if test="record.componentId != null">
        component_id = #{record.componentId,jdbcType=INTEGER},
      </if>
      <if test="record.typeId != null">
        Type_id = #{record.typeId,jdbcType=INTEGER},
      </if>
      <if test="record.componentName != null">
        Component_name = #{record.componentName,jdbcType=VARCHAR},
      </if>
      <if test="record.capacity != null">
        capacity = #{record.capacity,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update component
    set component_id = #{record.componentId,jdbcType=INTEGER},
      Type_id = #{record.typeId,jdbcType=INTEGER},
      Component_name = #{record.componentName,jdbcType=VARCHAR},
      capacity = #{record.capacity,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xiexin.bean.Component">
    update component
    <set>
      <if test="typeId != null">
        Type_id = #{typeId,jdbcType=INTEGER},
      </if>
      <if test="componentName != null">
        Component_name = #{componentName,jdbcType=VARCHAR},
      </if>
      <if test="capacity != null">
        capacity = #{capacity,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=INTEGER},
      </if>
    </set>
    where component_id = #{componentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xiexin.bean.Component">
    update component
    set Type_id = #{typeId,jdbcType=INTEGER},
      Component_name = #{componentName,jdbcType=VARCHAR},
      capacity = #{capacity,jdbcType=VARCHAR},
      price = #{price,jdbcType=INTEGER}
    where component_id = #{componentId,jdbcType=INTEGER}
  </update>
</mapper>